generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ALIVE
  DEAD
  MARRIED
}

enum Grade {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
  NINTH
}

enum UserType {
  ADMIN
  ACTIVITY_SUPERVISOR
  EDUCATION_SUPERVISOR
  HEALTH_SUPERVISOR
  BEHAVIOR_SUPERVISOR
  ORPHANAGE_SUPERVISOR
  SPONSOR
  GUARDIAN
}

enum HomeType {
  RENT
  OWNED
}

enum PaymentMethod {
  CASH
  TRANSACTION
}

enum SponsorshipPeriod {
  ONE_YEAR
  TWO_YEAR
}

model Orphan {
  id         Int       @id @default(autoincrement())
  name       String?
  image      String?
  gender     Gender?
  age        Int?
  birthplace String?
  birthdate  DateTime?
  joinDate   DateTime? @default(now())

  schoolName         String?
  gradeLevel         Grade?
  lastYearPercentage Float?

  fatherDeathDate DateTime?
  fatherWork      String?
  fatherDeathCos  String?

  noOfFamilyMembers Int?
  males             Int?
  females           Int?

  motherName     String?
  motherStatus   Status?
  isMotherWorks  Boolean? @default(false)
  motherJob      String?
  motherJobPhone String?
  monthlyIncome  Float?

  liveWith         String?
  homeType         String?
  homePhone        String?
  currentAddress   String?
  isSponsored      Boolean? @default(false)
  foundationName   String?
  foundationAmount Float?

  evaluation Float?
  //* relations

  //* one Orphan has many EmergancyContactInfo
  emergencyContactInfo EmergencyContactInfo[]
  //* one Orphan has one Guardian
  Guardian             Guardian?              @relation(fields: [guardianId], references: [userId])
  guardianId           Int?
  //* one Orphan has many Sponsorship
  Sponsorship          Sponsorship[]
  Attendance           Attendance[]
}

model Guardian {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  relationship String?
  //* relations
  //* one Guardian has many Orphan
  orphan       Orphan[]
  //* one Guardian is a User
}

model User {
  id         Int          @id @default(autoincrement())
  name       String?
  gender     Gender?
  userName   String?
  password   String?
  email      String?
  address    String?
  phone      String?
  type       UserType?
  Guardian   Guardian?
  Sponsor    Sponsor?
  Attendance Attendance[]
}

model EmergencyContactInfo {
  id    Int    @id @default(autoincrement())
  name  String
  phone String

  //* relations
  //* one orphan has many contact
  Orphan   Orphan @relation(fields: [orphanId], references: [id])
  orphanId Int
}

model Sponsor {
  id             Int           @id @default(autoincrement())
  birthdate      DateTime?
  fax            String?
  identityNumber String?
  //* relations
  userId         Int           @unique
  user           User          @relation(fields: [userId], references: [id])
  //* one Sponsor has many Sponsorship
  Sponsorship    Sponsorship[]
}

model Sponsorship {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  startDate         DateTime
  endDate           DateTime
  paymentMethod     PaymentMethod
  sponsorshipPeriod SponsorshipPeriod
  isActive          Boolean           @default(false)
  // * relation
  // * one sponsorship has one spondor
  sponsorId         Int
  Sponsor           Sponsor           @relation(fields: [sponsorId], references: [id])
  // * one sponsorship has one or more Orphan
  orphanId          Int
  Orphan            Orphan            @relation(fields: [orphanId], references: [id])
}

model Attendance {
  id             Int       @id @default(autoincrement())
  attendanceDate DateTime?
  //* relations
  User           User?     @relation(fields: [userId], references: [id])
  userId         Int?
  Orphan         Orphan[]
}
