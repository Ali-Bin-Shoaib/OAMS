generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ALIVE
  DEAD
  MARRIED
}

enum Grade {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
  NINTH
}

enum UserType {
  ADMIN
  ACTIVITY_SUPERVISOR
  EDUCATION_SUPERVISOR
  HEALTH_SUPERVISOR
  BEHAVIOR_SUPERVISOR
  ORPHANAGE_SUPERVISOR
  SPONSOR
  GUARDIAN
}

enum HomeType {
  RENT
  OWNED
}

enum PaymentMethod {
  CASH
  TRANSACTION
}

enum SponsorshipPeriod {
  ONE_YEAR
  TWO_YEAR
}

enum Degree {
  EXCELLENT
  VERY_GOOD
  GOOD
  ACCEPTED
  FAIL
}

enum NotificationType {
  Attendance
  Sponsorship
  Behavior
  Health
  Activity
  ActivityExecution
}

enum Quarter {
  First
  Second
  Third
  Fourth
}

model Orphan {
  id         Int      @id @default(autoincrement())
  name       String
  image      String?
  gender     Gender
  age        Int
  birthplace String
  birthdate  DateTime
  joinDate   DateTime @default(now())

  schoolName         String
  gradeLevel         Grade
  lastYearPercentage Float

  fatherDeathDate DateTime
  fatherWork      String?
  fatherDeathCos  String?

  noOfFamilyMembers Int?
  males             Int
  females           Int

  motherName     String
  motherStatus   Status
  isMotherWorks  Boolean @default(false)
  motherJob      String?
  motherJobPhone String?
  monthlyIncome  Float?

  liveWith         String
  homeType         HomeType
  homePhone        String?
  currentAddress   String
  isSponsored      Boolean  @default(false)
  foundationName   String?
  foundationAmount Float?

  evaluation Float?
  //* relations

  //* one Orphan has many EmergencyContactInfo
  EmergencyContactInfo    EmergencyContactInfo[]
  //* one Orphan has one Guardian
  Guardian                Guardian?                 @relation(fields: [guardianId], references: [userId])
  guardianId              Int
  //* one Orphan has many Sponsorship
  Sponsorship             Sponsorship[]
  //* one Orphan has many OrphanAttendance
  OrphanAttendance        OrphanAttendance[]
  //* one Orphan has many HealthInfo
  HealthInfo              HealthInfo[]
  //* one Orphan has many EducationInfo
  EducationInfo           EducationInfo[]
  Room                    Room?                     @relation(fields: [roomId], references: [id])
  roomId                  Int?
  OrphanActivityExecution OrphanActivityExecution[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Guardian {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  relationship String
  //* relations
  //* one Guardian has many Orphan
  orphan       Orphan[]
  //* one Guardian is a User
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  gender   Gender
  userName String
  password String
  email    String?
  address  String
  phone    String
  type     UserType
  //* relations

  Guardian              Guardian?
  Sponsor               Sponsor?
  Orphan                Orphan[]
  Attendance            Attendance[]
  HealthInfo            HealthInfo[]
  EducationInfo         EducationInfo[]
  ActivityExecutionInfo ActivityExecutionInfo[]
  EmergencyContactInfo  EmergencyContactInfo[]

  Sponsorship      Sponsorship[]
  OrphanAttendance OrphanAttendance[]

  BehaviorInfo       BehaviorInfo[]
  Criteria           Criteria[]
  BehaviorCriteria   BehaviorCriteria[]
  Room               Room[]
  Notification       Notification[]
  ActivityInfo       ActivityInfo[]
  UnAchievedActivity UnAchievedActivity[]
  ActivityGoal       ActivityGoal[]
  GoalTitle          GoalTitle[]
  GoalInfo           GoalInfo[]

  OrphanActivityExecution OrphanActivityExecution[]
}

model EmergencyContactInfo {
  id    Int    @id @default(autoincrement())
  name  String
  phone String

  //* relations
  //* one orphan has many contact
  Orphan   Orphan @relation(fields: [orphanId], references: [id])
  orphanId Int
  User     User?  @relation(fields: [userId], references: [id])
  userId   Int?
}

model Sponsor {
  id             Int           @id @default(autoincrement())
  birthdate      DateTime?
  fax            String?
  identityNumber String
  //* relations
  userId         Int           @unique
  user           User          @relation(fields: [userId], references: [id])
  //* one Sponsor has many Sponsorship
  Sponsorship    Sponsorship[]
}

model Sponsorship {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  startDate         DateTime
  endDate           DateTime
  paymentMethod     PaymentMethod
  sponsorshipPeriod SponsorshipPeriod
  isActive          Boolean           @default(false)
  // * relation
  // * one sponsorship has one sponsor
  sponsorId         Int
  Sponsor           Sponsor           @relation(fields: [sponsorId], references: [id])
  // * one sponsorship has one or more Orphan
  orphanId          Int
  Orphan            Orphan            @relation(fields: [orphanId], references: [id])
  User              User?             @relation(fields: [userId], references: [id])
  userId            Int?
}

model Attendance {
  id               Int                @id @default(autoincrement())
  date             DateTime           @default(now())
  //* relations
  User             User               @relation(fields: [userId], references: [id])
  userId           Int
  OrphanAttendance OrphanAttendance[]
}

model OrphanAttendance {
  id            Int     @id @default(autoincrement())
  isAttended    Boolean @default(true)
  // wing          String?
  absentReason  String?
  notes         String?
  returnDay     String?
  justification String?

  //* relations
  Attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  attendanceId Int
  Orphan       Orphan     @relation(fields: [orphanId], references: [id])
  orphanId     Int
  User         User?      @relation(fields: [userId], references: [id])
  userId       Int?
}

//* ********************************* TO IMPLEMENT*********************************
model HealthInfo {
  id          Int      @id @default(autoincrement())
  date        DateTime
  disease     String?
  description String?
  //* relations

  Orphan   Orphan? @relation(fields: [orphanId], references: [id])
  orphanId Int?
  User     User?   @relation(fields: [userId], references: [id])
  userId   Int?
}

model EducationInfo {
  id         Int      @id @default(autoincrement())
  date       DateTime
  scoreSheet String?
  degree     Degree
  schoolName String?
  //* relations

  //* one Orphan has many EducationInfo
  Orphan   Orphan? @relation(fields: [orphanId], references: [id])
  orphanId Int?
  User     User?   @relation(fields: [userId], references: [id])
  userId   Int?
}

model BehaviorInfo {
  id   Int      @id @default(autoincrement())
  date DateTime
  note String?
  //* relations

  BehaviorCriteria BehaviorCriteria[]
  User             User?              @relation(fields: [userId], references: [id])
  userId           Int?
}

model Criteria {
  id    Int     @id @default(autoincrement())
  title String?
  //* relations

  BehaviorCriteria BehaviorCriteria[]
  User             User?              @relation(fields: [userId], references: [id])
  userId           Int?
}

model BehaviorCriteria {
  id         Int   @id @default(autoincrement())
  evaluation Float
  //* relations

  Criteria       Criteria?     @relation(fields: [criteriaId], references: [id])
  criteriaId     Int?
  BehaviorInfo   BehaviorInfo? @relation(fields: [behaviorInfoId], references: [id], onDelete: Cascade)
  behaviorInfoId Int?
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
}

model Room {
  id       Int     @id @default(autoincrement())
  wing     String?
  capacity Int?
  //* relations

  Orphan Orphan[]
  User   User?    @relation(fields: [userId], references: [id])
  userId Int?
}

model Notification {
  id   Int               @id @default(autoincrement())
  date DateTime?
  type NotificationType?
  //* relations

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model ActivityInfo {
  id      Int      @id @default(autoincrement())
  date    DateTime
  title   String?
  budget  Float?
  target  String?
  type    String?
  quarter Quarter
  //* relations

  ActivityGoal          ActivityGoal[]
  ActivityExecutionInfo ActivityExecutionInfo[]
  UnAchievedActivity    UnAchievedActivity[]
  User                  User?                   @relation(fields: [userId], references: [id])
  userId                Int?
}

model UnAchievedActivity {
  id   Int     @id @default(autoincrement())
  note String?
  //* relations

  ActivityInfo   ActivityInfo? @relation(fields: [activityInfoId], references: [id])
  activityInfoId Int?
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
}

model ActivityGoal {
  id Int @id @default(autoincrement())
  //* relations

  ActivityInfo   ActivityInfo? @relation(fields: [activityInfoId], references: [id])
  activityInfoId Int?
  GoalTitle      GoalTitle?    @relation(fields: [goalTitleId], references: [id])
  goalTitleId    Int?
  GoalInfo       GoalInfo[]
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
}

model GoalTitle {
  id    Int    @id @default(autoincrement())
  title String
  //* relations

  ActivityGoal ActivityGoal[]
  User         User?          @relation(fields: [userId], references: [id])
  userId       Int?
}

model GoalInfo {
  id         Int      @id @default(autoincrement())
  evaluation Float
  date       DateTime
  //* relations

  ActivityGoal            ActivityGoal?          @relation(fields: [activityGoalId], references: [id])
  activityGoalId          Int?
  ActivityExecutionInfo   ActivityExecutionInfo? @relation(fields: [activityExecutionInfoId], references: [id])
  activityExecutionInfoId Int?
  User                    User?                  @relation(fields: [userId], references: [id])
  userId                  Int?
}

model ActivityExecutionInfo {
  id          Int       @id @default(autoincrement())
  cost        Float?
  description String?
  startDate   DateTime?
  note        String?
  // * Relations

  Executor User @relation(fields: [userId], references: [id])
  userId   Int

  ActivityInfo   ActivityInfo @relation(fields: [activityInfoId], references: [id])
  activityInfoId Int

  GoalInfo GoalInfo[]

  OrphanActivityExecution OrphanActivityExecution[]
}

model OrphanActivityExecution {
  id         Int    @id @default(autoincrement())
  evaluation Float?
  //* relations

  ActivityExecutionInfo   ActivityExecutionInfo? @relation(fields: [activityExecutionInfoId], references: [id])
  activityExecutionInfoId Int?
  Orphan                  Orphan?                @relation(fields: [orphanId], references: [id])
  orphanId                Int?
  User                    User?                  @relation(fields: [userId], references: [id])
  userId                  Int?
}
